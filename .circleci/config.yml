version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
 
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build         

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end analyze
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end analyze
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INVENTORY_FILE=~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
                --filters 'Name=tag:project,Values=udapeople' \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> $INVENTORY_FILE
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1f:34:26:32:c1:51:f7:55:49:a7:38:92:7a:b3:3f:97"] 
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -vvv -i /tmp/workspace/project/.circleci/ansible/inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - scan-backend:
#          requires: [build-backend]
#          context:
#            - cloud-devops-nanodegree
      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
