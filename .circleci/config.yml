version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environments"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # TODO Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migartions:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build         

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end analyze
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end analyze
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INVENTORY_FILE=~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
                --filters 'Name=tag:project,Values=udapeople' \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> $INVENTORY_FILE
            cat $INVENTORY_FILE 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
#      - image: python:3.7-alpine3.11
      - image: python:3.8.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1f:34:26:32:c1:51:f7:55:49:a7:38:92:7a:b3:3f:97"] 
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -vvv -i /tmp/workspace/project/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/6tQmVhNfeiCMBtZiHRD4f6/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
#      - image: python:3.7-alpine3.11
#      - image: python:3.8.16-alpine3.17
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt list --installed
            sudo apt-get update
            sudo apt-get install ansible awscli -y
#            apk add --update ansible openssh tar aws-cli curl bash
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters 'Name=tag:project,Values=udapeople' \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-environment
                
  deploy-backend:
    docker:
#      - image: python:3.7-alpine3.11
      - image: python:3.8.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1f:34:26:32:c1:51:f7:55:49:a7:38:92:7a:b3:3f:97"] 
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh nodejs=13.8.0 npm=6.13.6 tar aws-cli
      - run:
          name: Deploy backend
#            cd ..
#            tar -C backend -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz .
#            tar -czvf ../.circleci/ansible/roles/deploy/files/artifact.tar.gz .
          command: |
            pwd
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz ./.circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat /tmp/workspace/project/.circleci/ansible/inventory.txt
            ansible-playbook -vvvvv -i /tmp/workspace/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment
  
workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#          filters:
#            branches:
#              only: [no-vulnerabilities-feature-branch]
#      - scan-backend:
#          requires: [build-backend]
#          context:
#            - cloud-devops-nanodegree
#          filters:
#            branches:
#              only: [no-vulnerabilities-feature-branch]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
      - deploy-frontend
      - deploy-backend
